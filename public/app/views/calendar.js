// Generated by CoffeeScript 1.8.0
(function() {
  define(function(require, exports, module) {
    var App, AppointmentsLayout, CalendarHeaderItem, CalendarHeaderView, DayPartView, EmptyItem, Item, Marionette, calendarTemplate, emptyItemTemplate, headerItemTemplate, itemTemplate, moment, msgBus;
    Marionette = require('marionette');
    App = require('app');
    msgBus = require('msgbus');
    moment = require('moment');
    calendarTemplate = require('text!templates/calendar/index.tpl');
    itemTemplate = require('text!templates/calendar/item.tpl');
    emptyItemTemplate = require('text!templates/calendar/empty_item.tpl');
    headerItemTemplate = require('text!templates/calendar/header_item.tpl');
    Item = Marionette.ItemView.extend({
      tagName: 'li',
      template: _.template(itemTemplate),
      events: {
        'click .available': 'selectAppointment'
      },
      initialize: function() {
        this.addAttribute('data-item', this.model.get('indexOfWeek'));
        return this.addAttribute('data-date', this.model.get('startDate'));
      },
      onBeforeRender: function() {
        var endTime, meridiemIndicator, scheduled, startTime;
        startTime = null;
        endTime = null;
        meridiemIndicator = null;
        scheduled = this.model.has('id') ? ' scheduled' : false;
        if (this.model.get('isAvailable')) {
          startTime = moment(this.model.get('startDate')).format('hh:mm');
          endTime = moment(this.model.get('endDate')).format('hh:mm');
          meridiemIndicator = moment(this.model.get('endDate')).format('A');
          return this.model.set({
            cid: this.model.cid,
            className: scheduled ? 'scheduled' : 'available',
            appointment: startTime + ' - ' + endTime + ' ' + meridiemIndicator,
            scheduled: scheduled
          });
        }
      },
      addAttribute: function(attrName, attrValue) {
        return this.$el.attr(attrName, attrValue);
      },
      selectAppointment: function(e) {
        e.preventDefault();
        return msgBus.reqres.request('schedule:' + App.flow + ':review', this.options.model);
      }
    });
    EmptyItem = Marionette.ItemView.extend({
      tagName: 'li',
      className: 'empty',
      template: _.template(emptyItemTemplate),
      initialize: function() {
        return this.addClass('item-' + this.model.get('indexOfWeek'));
      },
      addClass: function(className) {
        return this.$el.addClass(className);
      }
    });
    DayPartView = Marionette.CollectionView.extend({
      tagName: 'ul',
      itemViewOptions: function(model, index) {
        return {
          itemIndex: index
        };
      },
      getItemView: function(item) {
        if (item.get('isAvailable')) {
          return Item;
        } else {
          return EmptyItem;
        }
      }
    });
    CalendarHeaderItem = Marionette.ItemView.extend({
      tagName: 'li',
      initialize: function() {
        if (this.model.get('selected')) {
          return this.$el.addClass('selected');
        }
      },
      template: _.template(headerItemTemplate)
    });
    CalendarHeaderView = Marionette.CollectionView.extend({
      tagName: 'ul',
      className: 'day-dates',
      itemView: CalendarHeaderItem
    });
    AppointmentsLayout = Marionette.Layout.extend({
      template: _.template(calendarTemplate),
      regions: {
        header: '.appointments-header',
        morning: '.morning',
        afternoon: '.afternoon',
        evening: '.evening'
      },
      events: {
        'click .toggle-day': 'toggleDayPart'
      },
      toggleDayPart: function(e) {
        e.preventDefault();
        return $(e.currentTarget).next().toggle();
      }
    });
    module.exports = function(options) {
      var appointmentsLayout;
      appointmentsLayout = new AppointmentsLayout();
      App.layout.content.show(appointmentsLayout);
      appointmentsLayout.header.show(new CalendarHeaderView({
        collection: options.dates
      }));
      appointmentsLayout.morning.show(new DayPartView({
        collection: new Backbone.Collection(options.appointments.models[0].get('morning'))
      }));
      appointmentsLayout.afternoon.show(new DayPartView({
        collection: new Backbone.Collection(options.appointments.models[0].get('afternoon'))
      }));
      return appointmentsLayout.evening.show(new DayPartView({
        collection: new Backbone.Collection(options.appointments.models[0].get('evening'))
      }));
    };
  });

}).call(this);

//# sourceMappingURL=calendar.js.map
